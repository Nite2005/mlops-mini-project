## DOCKERHUB TO EC2
# name: CI Pipeline

# on: push

# jobs: 
#   project-testing:
#     runs-on: ubuntu-latest


#     steps:
#       - name: checkout code
#         uses: actions/checkout@v3
#       - name: setup python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.10'

#       - name: Cache pip dependencies
#         uses: actions/cache@v3 
#         with: 
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
#           restore-keys: |
#             ${{ runner.os}}-pip-
      
#       - name: install dependencies
#         run: |
#           pip install -r requirements.txt
#       - name: Install nltk data
#         run: |
#           python -m nltk.downloader punkt
#       - name: run pipeline
#         env:
#           DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT  }}
#         run: |
#           dvc repro

#       - name: Run tests
#         env:
#           DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
#         run: |
#           python -m unittest tests/test_model.py
      
#       - name: Promote model to production
#         if: success()
#         env:
#           DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
#         run: |
#           python scripts/promote_model.py

#       - name: Run Flask app tests
#         if: success()
#         env:
#           DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
#         run: |
#           python -m unittest tests/test_flask_app.py
        
#       - name: Log in to Docker Hub
#         if: success()
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#       - name: Build docker image
#         if: success()
#         run: |
#           docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/emotion3:latest .

#       - name: push docker image to docker Hub
#         if: success()
#         run: |
#           docker push ${{ secrets.DOCKER_HUB_USERNAME }}/emotion3:latest

#       - name: Deploy to EC2
#         if: success()
#         uses: appleboy/ssh-action@v0.1.5
#         with: 
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/emotion3:latest
#             docker stop my-app || true
#             docker rm my-app || true
#             docker run -p 80:5000 --name my-app \
#               -e DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }} \
#               ${{ secrets.DOCKER_HUB_USERNAME }}/emotion3:latest



## ECS TO EC2


name: CI Pipeline

on: push

jobs: 
  project-testing:
    runs-on: ubuntu-latest


    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3 
        with: 
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os}}-pip-
      
      - name: install dependencies
        run: |
          pip install -r requirements.txt
      - name: Install nltk data
        run: |
          python -m nltk.downloader punkt
      - name: run pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT  }}
        run: |
          dvc repro

      - name: Run tests
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python -m unittest tests/test_model.py
      
      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python scripts/promote_model.py

      - name: Run Flask app tests
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python -m unittest tests/test_flask_app.py
        
      - name: Login to AWS ECR
        run : |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 619071355884.dkr.ecr.ap-south-1.amazonaws.com
      
      - name: Build Docker image
        run: |
          docker build -t emotion_detection .
      
      - name: Tag Docker image
        run: |
          docker tag emotion_detection:latest 619071355884.dkr.ecr.ap-south-1.amazonaws.com/emotion_detection:latest
      
      - name: Push Docker image to AWS ECR
        run: |
          docker push 619071355884.dkr.ecr.ap-south-1.amazonaws.com/emotion_detection:latest
          


      - name: Deploy to EC2
        if: success()
        uses: appleboy/ssh-action@v0.1.5
        with: 
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 619071355884.dkr.ecr.ap-south-1.amazonaws.com
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/emotion3:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -p 80:5000 --name my-app \
              -e DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }} \
              ${{ secrets.DOCKER_HUB_USERNAME }}/emotion3:latest